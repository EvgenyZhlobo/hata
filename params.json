{"name":"Hata","tagline":"Lightweight JavaScript framework for manipulation dom elements","body":"# Hata\r\n\r\nLightweight JavaScript framework for manipulation dom elements.\r\n\r\n[Releases](https://github.com/ezhlobo/hata/releases)\r\n\r\n## Table of content:\r\n* [Getting started](#getting-started)\r\n* [Documentation](#documentation)\r\n  * [Before reading](#before-reading)\r\n  * [Constructor](#constructor)\r\n  * [DOM is ready](#dom-is-ready)\r\n    * __[hata().get([ number ])](#hataget-number-)__\r\n    * __[hata().eq( number )](#hataeq-number-)__\r\n    * __[hata().each( function )](#hataeach-function-)__\r\n    * __[hata().filter( selector )](#hatafilter-selector-)__\r\n    * __[hata().is( selector )](#hatais-selector-)__\r\n    * __[hata().find( selector )](#hatafind-selector-)__\r\n    * __[hata().parent()](#hataparent)__\r\n    * __[hata().parents( selector )](#hataparents-selector-)__\r\n    * __[hata().closest( selector )](#hataclosest-selector-)__\r\n  * [Utilities](#utilities)\r\n    * __[hata.pushUniq( array, element )](#hatapushuniq-array-element-)__\r\n    * __[hata.toArray( object )](#hatatoarray-object-)__\r\n    * __[hata.each( object, function )](#hataeach-object-function-)__\r\n  * [Extending](#extending)\r\n    * __[hata.extend( object, object )](#hataextend-object-object-)__\r\n* [Applications use hata](#applications-use-hata)\r\n* [Contributions](#contributions)\r\n\r\n## Getting started\r\n\r\nSave [compressed](http://mmjs.herokuapp.com/?url=https://raw.github.com/ezhlobo/hata/master/hata.js) hata framework.\r\n\r\n```html\r\n<script src=\"js/hata.js\" type=\"text/javascript\">\r\n```\r\n\r\n## Documentation\r\n\r\n### Before reading\r\n* `selector` and `context` can be string selector, hata object or node.\r\n* `number` can be positive or negative number.\r\n\r\n### Constructor\r\n```js\r\nhata( selector );\r\nhata( selector, context );\r\n```\r\n\r\n### DOM is ready\r\n```js\r\nhata.ready(function() {\r\n  // Now DOM is fully loaded\r\n});\r\n```\r\n\r\n#### hata().get([ number ])\r\n```js\r\nhataObj.get(); // => Array of nodes\r\nhataObj.get( number ); // => One node by index\r\nhata( \"div\" ).get( -1 ); // => Return last div node\r\n```\r\n\r\n#### hata().eq( number )\r\n```js\r\nhataObj.eq( number ); // => Hata object of one element\r\nhata( \"div\" ).eq( 1 ); // => Hata object of second element\r\n```\r\n\r\n#### hata().each( function )\r\n```js\r\nhataObj.each(function( element, index ) {\r\n  // this => node element\r\n  // element => node element\r\n  // index => index of node element\r\n});\r\n```\r\nThis method __returns__ previous Hata object.\r\n\r\n#### hata().filter( selector )\r\n```js\r\nhataObj.filter( selector ); // => Hata object of elements filtering by `selector`\r\nhata( \"div\" ).filter( \".tag\" ); // => Hata object of divs with class 'tag'\r\n```\r\n\r\n#### hata().is( selector )\r\n```js\r\nhataObj.is( selector ) // => true if hataObj is matched to selector\r\nhata( \"div\" ).is( \".tag\" ); // => True is there are divs with class \"tag\"\r\n```\r\nThis method __returns__ true or false.\r\n\r\n#### hata().find( selector )\r\nEquivalent to hata( selector, hata() ).\r\n```js\r\nhataObj.find( selector ) // => Find elements inside current collection\r\nhata( \"div\" ).find( \"p\" ); // => Return hata( \"div p\" )\r\n```\r\n\r\n#### hata().parent()\r\n```html\r\n<body>\r\n  <section>\r\n    <div class=\"tag\">tag</div>\r\n  </section>\r\n</body>\r\n```\r\n```js\r\nhataObj.parent(); // => Return parents\r\nhata( \".tag\" ).parent(); // => Return hata( \"section\" )\r\nhata( \"section\" ).parent(); // => Return hata( body )\r\n```\r\n\r\n#### hata().parents( selector )\r\n```html\r\n<body>\r\n  <section>\r\n    <div class=\"tag\">tag</div>\r\n  </section>\r\n</body>\r\n```\r\n```js\r\nhataObj.parents( selector ); // => Return parents which satisfies the 'selector'\r\nhata( \".tag\" ).parents( \"body\" ); // => Return hata( \"body\" )\r\nhata( \"section\" ).parents( \".tag\" ); // => Return hata( document )\r\n```\r\n\r\n#### hata().closest( selector )\r\n```js\r\nhataObj.closest( selector ); // => First parents by `selector` or this elements if it is `selector`\r\nhata( \"div\" ).closest( \".tag\" ); // => Return hata( \"div\" ) is there is div with class \"tag\"\r\nhata( \"div\" ).closest( \".tag\" ); // => Works like .parents() if divs without class \"tag\"\r\n```\r\n\r\n### Utilities\r\n\r\n#### hata.pushUniq( array, element )\r\n```js\r\nhata.pushUniq( arr, element ); // => Add an element to the array if it is unique\r\nhata.pushUniq( [1, 2], 1 ); // => [1, 2]\r\nhata.pushUniq( [1, 2], 3 ); // => [1, 2, 3]\r\n```\r\nThis method __returns__ array.\r\n\r\n#### hata.toArray( object )\r\n```js\r\nhata.toArray( obj ); // => Convert something into an array\r\nhata.toArray(); // => []\r\nhata.toArray( \"string\" ); // => [ \"string\" ]\r\nhata.toArray( document.querySelectorAll( \"div\" ) ); // => Array of divs\r\n```\r\nThis method __returns__ array.\r\n\r\n#### hata.each( object, function )\r\n```js\r\nhata.each( obj, function( element, key ) {\r\n  // this => value\r\n});\r\n```\r\n\r\n### Extending\r\n#### hata.extend( object, object )\r\nIf you want to add hata methods:\r\n```js\r\nhata.extend( hata.fn, {\r\n  ping: function() {\r\n    return 'pong';\r\n  }\r\n});\r\n\r\n// or\r\n\r\nhata.fn.ping = function() {\r\n  return 'pong';\r\n}\r\n\r\nelements.ping(); // => 'pong'\r\n```\r\n\r\nIf you want to extend some objects:\r\n```js\r\nvar someObject = {};\r\n\r\nhata.extend( someObject, {\r\n  ping: function() {\r\n    return 'pong';\r\n  }\r\n});\r\n\r\nsomeObject.ping(); // => 'pong'\r\n```\r\n\r\n## Applications use hata:\r\n* [vkleaner](http://vkleaner.losky.net) - chrome extension for vk.com that hides unwanted posts. Look at [sources](https://github.com/EvgenyZhlobo/vkleaner/tree/master/js) for better understand role of Hata.\r\n\r\n## Contributions\r\n\r\nContribuitions always are welcome. Hata is written according to [jQuery Core Style Guide](http://contribute.jquery.org/style-guide/js/) and:\r\n```js\r\n// Good\r\nif ( condition ) return some;\r\nif ( condition ) break;\r\n```\r\nFeel free to fork and pull request changes.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}